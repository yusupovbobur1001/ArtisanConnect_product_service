// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: users.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	UpdateProfile(ctx context.Context, in *UserUpdate, opts ...grpc.CallOption) (*GetProfile, error)
	DeleteProfile(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Message, error)
	GetByIdProfile(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GetProfile, error)
	GetAllProfil(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*UsersInfo, error)
	ProfileUserType(ctx context.Context, in *UserType, opts ...grpc.CallOption) (*GetProfile, error)
	UpdateProfilePassword(ctx context.Context, in *RestoreProfile, opts ...grpc.CallOption) (*Message, error)
	RefreshToken(ctx context.Context, in *Refreshtoken, opts ...grpc.CallOption) (*Tokens, error)
	ValidateUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Exists, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) UpdateProfile(ctx context.Context, in *UserUpdate, opts ...grpc.CallOption) (*GetProfile, error) {
	out := new(GetProfile)
	err := c.cc.Invoke(ctx, "/auth.Auth/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteProfile(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/auth.Auth/DeleteProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetByIdProfile(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GetProfile, error) {
	out := new(GetProfile)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetByIdProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetAllProfil(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*UsersInfo, error) {
	out := new(UsersInfo)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetAllProfil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ProfileUserType(ctx context.Context, in *UserType, opts ...grpc.CallOption) (*GetProfile, error) {
	out := new(GetProfile)
	err := c.cc.Invoke(ctx, "/auth.Auth/ProfileUserType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateProfilePassword(ctx context.Context, in *RestoreProfile, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/auth.Auth/UpdateProfilePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RefreshToken(ctx context.Context, in *Refreshtoken, opts ...grpc.CallOption) (*Tokens, error) {
	out := new(Tokens)
	err := c.cc.Invoke(ctx, "/auth.Auth/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ValidateUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := c.cc.Invoke(ctx, "/auth.Auth/ValidateUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	UpdateProfile(context.Context, *UserUpdate) (*GetProfile, error)
	DeleteProfile(context.Context, *Id) (*Message, error)
	GetByIdProfile(context.Context, *Id) (*GetProfile, error)
	GetAllProfil(context.Context, *Filter) (*UsersInfo, error)
	ProfileUserType(context.Context, *UserType) (*GetProfile, error)
	UpdateProfilePassword(context.Context, *RestoreProfile) (*Message, error)
	RefreshToken(context.Context, *Refreshtoken) (*Tokens, error)
	ValidateUserId(context.Context, *Id) (*Exists, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) UpdateProfile(context.Context, *UserUpdate) (*GetProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedAuthServer) DeleteProfile(context.Context, *Id) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedAuthServer) GetByIdProfile(context.Context, *Id) (*GetProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdProfile not implemented")
}
func (UnimplementedAuthServer) GetAllProfil(context.Context, *Filter) (*UsersInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProfil not implemented")
}
func (UnimplementedAuthServer) ProfileUserType(context.Context, *UserType) (*GetProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileUserType not implemented")
}
func (UnimplementedAuthServer) UpdateProfilePassword(context.Context, *RestoreProfile) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfilePassword not implemented")
}
func (UnimplementedAuthServer) RefreshToken(context.Context, *Refreshtoken) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServer) ValidateUserId(context.Context, *Id) (*Exists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUserId not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateProfile(ctx, req.(*UserUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/DeleteProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeleteProfile(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetByIdProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetByIdProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetByIdProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetByIdProfile(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetAllProfil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAllProfil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetAllProfil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAllProfil(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ProfileUserType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ProfileUserType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/ProfileUserType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ProfileUserType(ctx, req.(*UserType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateProfilePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateProfilePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/UpdateProfilePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateProfilePassword(ctx, req.(*RestoreProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Refreshtoken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RefreshToken(ctx, req.(*Refreshtoken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ValidateUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ValidateUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/ValidateUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ValidateUserId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateProfile",
			Handler:    _Auth_UpdateProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _Auth_DeleteProfile_Handler,
		},
		{
			MethodName: "GetByIdProfile",
			Handler:    _Auth_GetByIdProfile_Handler,
		},
		{
			MethodName: "GetAllProfil",
			Handler:    _Auth_GetAllProfil_Handler,
		},
		{
			MethodName: "ProfileUserType",
			Handler:    _Auth_ProfileUserType_Handler,
		},
		{
			MethodName: "UpdateProfilePassword",
			Handler:    _Auth_UpdateProfilePassword_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Auth_RefreshToken_Handler,
		},
		{
			MethodName: "ValidateUserId",
			Handler:    _Auth_ValidateUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
